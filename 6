#include <stdio.h>
#include <limits.h>
#define MAX 10

int tsp(int graph[][MAX], int pos, int visited, int start, int V, int dp[][1 << MAX], int parent[][1 << MAX]) {
    if (visited == (1 << V) - 1)
        return graph[pos][start];

    if (dp[pos][visited] != -1)
        return dp[pos][visited];

    int minCost = INT_MAX;
    for (int city = 0; city < V; city++) {
        if (!(visited & (1 << city))) {
            int newVisited = visited | (1 << city);
            int cost = graph[pos][city] + tsp(graph, city, newVisited, start, V, dp, parent);
            if (cost < minCost) {
                minCost = cost;
                parent[pos][visited] = city;
            }
        }
    }
    return dp[pos][visited] = minCost;
}

void reconstructPath(int parent[][1 << MAX], int V, int start, int path[], int *pathIndex) {
    int visited = 1 << start;
    int pos = start;
    while (1) {
        path[(*pathIndex)++] = pos;
        if ((*pathIndex) == V) break;
        pos = parent[pos][visited];
        visited |= (1 << pos);
    }
    path[(*pathIndex)++] = start;
}

int main() {
    int V;
    printf("Enter the number of cities: ");
    scanf("%d", &V);
    if (V > MAX) {
        printf("Number of cities exceeds the maximum limit of %d\n", MAX);
        return 1;
    }
    int graph[MAX][MAX];
    printf("Enter the distances between the cities in matrix form:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int dp[MAX][1 << MAX];
    int parent[MAX][1 << MAX];
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < (1 << MAX); j++) {
            dp[i][j] = -1;
            parent[i][j] = -1;
        }
    }

    int start = 0;
    int path[MAX + 1];
    int pathIndex = 0;

    int result = tsp(graph, start, 1 << start, start, V, dp, parent);

    reconstructPath(parent, V, start, path, &pathIndex);

    printf("The minimum cost of the TSP is: %d\n", result);
    printf("The path taken is: ");
    for (int i = 0; i < pathIndex; i++) {
        printf("%d ", path[i] + 1);
    }
    printf("\n");

    return 0;
}
